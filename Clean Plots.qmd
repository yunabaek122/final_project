---
title: "Final Project Graphs"
author: "Sumner Perera"
date: ""
format: 
    pdf:
      keep-tex: true
      latex-engine: xelatex
      include-in-header: 
        text: |
          \usepackage{fvextra}
          \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
          \DefineVerbatimEnvironment{OutputCode}{Verbatim}{breaklines,commandchars=\\\{\}}

execute:
  eval: true 
  echo: true
---


```{python}
#Open up the shx file
import geopandas as gpd 
import pandas as pd
import matplotlib.pyplot as plt

filepath = r"C:\Users\12019\OneDrive - The University of Chicago\Documents\GitHub\final_project\Cooling_Centers_-_District_of_Columbia\Cooling_Centers_-_District_of_Columbia.shp"
cooling_centers = gpd.read_file(filepath)
```


```{python}
#Let's explore the cooling centers first. Not all cooling centers are entirely accessible. Only include low-barrier and day shelters that are accessible to all genders. Eliminate all centers that are closed. 
clean_cc = cooling_centers[(cooling_centers["USER_Open_"] == "All") & (~cooling_centers["USER_Hours"].str.contains('closed', case=False, na=False))]

#Now plot these
clean_cc.plot(marker='o', color = "green", figsize=(10,8), alpha=0.5)

#Still seeing some overlap so going to break it out by the different types of centers
ax = clean_cc.plot(column="USER_Type", figsize=(10,8), legend=True, cmap="tab10")
ax.set_title("Cooling Centers by Type", fontsize=16)
plt.show()
```


```{python}
#Next, plot out the empty ward map 
filepath2 = r"C:\Users\12019\OneDrive - The University of Chicago\Documents\GitHub\final_project\Data\Wards_from_2022\Wards_from_2022.shp"
empty_DC = gpd.read_file(filepath2)

#Plot the empty DC graph 
empty_DC.plot(edgecolor="black", facecolor="none", figsize=(10,10))
plt.title("DC Empty Map", fontsize=14)
plt.show()

```


```{python}
#Map both of the graphs on top of one another
clean_cc = clean_cc.to_crs(empty_DC.crs)

fig, ax = plt.subplots(figsize=(10,10))
empty_DC.plot(ax=ax, edgecolor="black", facecolor="none", label="Layer 1")
clean_cc.plot(ax=ax, column="USER_Type", alpha=0.7, legend=True, cmap="tab10", label="Layer2")

plt.title("All Accessible Cooling Centers by Ward")
plt.show()

```


```{python}
#Proportions Table for Centers
counts = clean_cc["USER_Type"].value_counts()
percentages = counts / counts.sum() * 100
centers_table = pd.DataFrame({"Counts": counts, "Percentage": percentages.round(2)})

print(centers_table)

```