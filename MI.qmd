---
title: "Untitled"
format: html
---


```{python}
import pandas as pd 


import os  
import geopandas as gpd 
import pandas as pd
import matplotlib.pyplot as plt
import altair as alt
import json

```

```{python}
#Reading in main data 
file_path = "/Users/mithilaiyer/Documents/GitHub/final_project/shp/Heat_Sensitivity_Exposure_Index.shp"
heat_dc = gpd.read_file(file_path)
```


I. Double altair work

```{python}
import altair as alt

# Assuming your GeoDataFrame is 'gdf_sel'

chartflip = alt.Chart(heat_dc).mark_geoshape().encode(
    color='HEI:Q',  # Quantitative color scale for HEI
    tooltip=['HEI']
).project(
    type='identity',  # Identity projection (no geographic projection)
    reflectY=True      # Reflect the map over the Y-axis (flip vertically)
).properties(
    title="Heat Exposure Index (HEI)",
    width=600,
    height=600
)

chartflip

```

```{python}
#Creating cooling centers plot 
sample_path = "/Users/mithilaiyer/Documents/GitHub/final_project/Cooling_Centers_-_District_of_Columbia.csv"
cc_data = pd.read_csv(sample_path, low_memory=False) 
```

```{python}
##THIS DID NOT WORK###
import altair as alt
import pandas as pd

# Create the scatter plot with specific x-axis range
scatter_plot = alt.Chart(cc_data).mark_circle(size=60).encode(
    x=alt.X('X', scale=alt.Scale(domain=[1290000, 1350000])),  # Set x-axis range
    y='Y',  # Y axis variable
    tooltip=['X', 'Y']  # Optional, shows X and Y values on hover
).properties(
    title='Scatter Plot of X vs Y'
)

# Display the plot
scatter_plot.show()

```

```{python}
file_path = "/Users/mithilaiyer/Documents/GitHub/final_project/shp/Cooling_Centers_-_District_of_Columbia.shp"
cc_dc = gpd.read_file(file_path)
```

```{python}
import altair as alt

# Step 1: Extract x and y coordinates from the geometry column
cc_dc['x'] = cc_dc.geometry.x
cc_dc['y'] = cc_dc.geometry.y

# Step 2: Create the Altair scatterplot
chart = alt.Chart(cc_dc).mark_circle().encode(
    x='x',          # x-coordinate of the points
    y='y',          # y-coordinate of the points
    color='id:N'    # Optional: color by 'id' (replace with a relevant column in your GeoDataFrame)
)

# Show the chart
chart.show()

```


II. Altair + Geojson work 

Base chart 

```{python}
chart = alt.Chart(heat_dc).mark_geoshape().encode(
    color='HEI:Q',  # Quantitative color scale for HEI
    tooltip=['HEI']
).project('identity').properties(
    title="Heat Exposure Index (HEI)",
    width=600,
    height=600
)

chart
```






Flipping chart 
```{python}
import altair as alt

# Assuming your GeoDataFrame is 'gdf_sel'

chart2 = alt.Chart(heat_dc).mark_geoshape().encode(
    color='HEI:Q',  # Quantitative color scale for HEI
    tooltip=['HEI']
).project(
    type='identity',  # Identity projection (no geographic projection)
    reflectY=True      # Reflect the map over the Y-axis (flip vertically)
).properties(
    title="Heat Exposure Index (HEI)",
    width=600,
    height=600
)

chart2

```



Loading in geojson
```{python}
#Modifying code
file_path = "/Users/mithilaiyer/Documents/GitHub/final_project/Cooling_Centers_-_District_of_Columbia.geojson"
#----
with open(file_path) as f:
    dc_geojson = json.load(f)

geo_data = alt.Data(values=dc_geojson["features"])

background = alt.Chart(geo_data).mark_geoshape(
    fill='lightgray',
    stroke='white'
).project(type="identity", reflectY=True).properties()

background

print(geo_data.crs)
```



how to fix flip. that means they flip on two separate lines of spatial thing. 

thats why they had problems 

print("filename".crs)

clean_cc = clean_cc.to_crs(empty_DC.crs)


Combining - unflipped 
```{python}
chart + background
```

Combining - flipped test

```{python}
chart2 + background

```



```

```




```